<?php

namespace App\Console\Commands\Make;

use Illuminate\Console\GeneratorCommand;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Str;
use Symfony\Component\Console\Input\InputArgument;

class MakeRepositoryCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:repository';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new repository class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Repository';

    /**
     * @inheritDoc
     */
    protected function getStub()
    {
        // TODO: Implement getStub() method.
        return __DIR__ . '/Stubs/repository.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param string $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace . '\Http\Repository';
    }

    /**
     * Replace the namespace for the given stub.
     *
     * @param string $stub
     * @param string $name
     * @return $this
     */
    protected function replaceNamespace(&$stub, $name)
    {
        $name = $this->argument('name');

        // 因為懶得多一個輸入參數來設定 Repository 的名稱
        // 所以設定Service 與 Repository的前一個單字相同
        $modelName = explode('_', str::snake($name))[0];

        // 建立 model,
        // 可在migrate時候就先建立起來就不用依賴在這裡實作
        if (false === $this->files->exists(app_path(ucfirst($modelName) . '.php'))) {
            Artisan::call('make:model', ['name' => ucfirst($modelName)]);
        }

        /// TODO: Change the autogenerated stub
        $stub = str_replace(
            [
                '{{model}}',
                '{{modelLower}}',
            ],
            [
                ucfirst($modelName),
                $modelName
            ],
            $stub
        );
        return $this;
    }

    /**
     * Get the console command options.`
     *
     * @return array
     */
    protected function getOptions()
    {
        return [
            ['name', 'r', InputArgument::REQUIRED, 'Injection  name.']
        ];
    }
}
