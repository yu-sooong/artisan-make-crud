<?php

namespace App\Console\Commands\Make;

use Illuminate\Console\GeneratorCommand;
use Illuminate\Support\Str;
use Symfony\Component\Console\Input\InputArgument;

class MakeServiceCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:service';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new service class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Service';

    /**
     * @inheritDoc
     */
    protected function getStub()
    {
        // TODO: Implement getStub() method.
        return __DIR__ . '/Stubs/service.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param string $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace . '\Http\Services';
    }

    /**
     * Replace the namespace for the given stub.
     *
     * @param string $stub
     * @param string $name
     * @return $this
     */
    protected function replaceNamespace(&$stub, $name)
    {
        $name = $this->argument('name');

        // 因為懶得多一個輸入參數來設定 Repository 的名稱
        // 所以設定Service 與 Repository的前一個單字相同
        $repositoryName = explode('_', str::snake($name))[0] . 'Repository';

        /// TODO: Change the autogenerated stub
        $stub = str_replace(
            [
                '{{NameRepository}}',
                '{{NameRepositoryLowerFirstCase}}',
            ],
            [
                ucfirst($repositoryName),
                $repositoryName
            ],
            $stub
        );
        return $this;
    }

    /**
     * Get the console command options.`
     *
     * @return array
     */
    protected function getOptions()
    {
        return [
            ['name', 'r', InputArgument::REQUIRED, 'Injection  name.']
        ];
    }
}
